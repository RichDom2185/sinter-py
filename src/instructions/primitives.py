import math

# Must match the order of the functions in the wiki
# https://github.com/source-academy/js-slang/wiki/SVML-Instruction-Set#primitive-functions
PRIMITIVE_FUNCTIONS = [
    'accumulate',
    'append',
    'array_length',
    'build_list',
    'build_stream',
    'display',
    'draw_data',
    'enum_list',
    'enum_stream',
    'equal',
    'error',
    'eval_stream',
    'filter',
    'for_each',
    'head',
    'integers_from',
    'is_array',
    'is_boolean',
    'is_function',
    'is_list',
    'is_null',
    'is_number',
    'is_pair',
    'is_stream',
    'is_string',
    'is_undefined',
    'length',
    'list',
    'list_ref',
    'list_to_stream',
    'list_to_string',
    'map',
    'math_abs',
    'math_acos',
    'math_acosh',
    'math_asin',
    'math_asinh',
    'math_atan',
    'math_atan2',
    'math_atanh',
    'math_cbrt',
    'math_ceil',
    'math_clz32',
    'math_cos',
    'math_cosh',
    'math_exp',
    'math_expm1',
    'math_floor',
    'math_fround',
    'math_hypot',
    'math_imul',
    'math_log',
    'math_log1p',
    'math_log2',
    'math_log10',
    'math_max',
    'math_min',
    'math_pow',
    'math_random',
    'math_round',
    'math_sign',
    'math_sin',
    'math_sinh',
    'math_sqrt',
    'math_tan',
    'math_tanh',
    'math_trunc',
    'member',
    'pair',
    'parse_int',
    'remove',
    'remove_all',
    'reverse',
    'runtime',
    'set_head',
    'set_tail',
    'stream',
    'stream_append',
    'stream_filter',
    'stream_for_each',
    'stream_length',
    'stream_map',
    'stream_member',
    'stream_ref',
    'stream_remove',
    'stream_remove_all',
    'stream_reverse',
    'stream_tail',
    'stream_to_list',
    'tail',
    'stringify',
    'prompt',
]


def _handle_notimplemented(*args):
    raise NotImplementedError()


IMPLEMENTED_FUNCTIONS = {
    'display': print,
    'math_abs': abs,
    'math_acos': math.acos,
    'math_acosh': math.acosh,
    'math_asin': math.asin,
    'math_asinh': math.asinh,
    'math_atan': math.atan,
    'math_atan2': math.atan2,
    'math_atanh': math.atanh,
    'math_cbrt': lambda x: x ** (1 / 3),
    'math_ceil': math.ceil,
    'math_clz32': _handle_notimplemented,
    'math_cos': math.cos,
    'math_cosh': math.cosh,
    'math_exp': math.exp,
    'math_expm1': math.expm1,
    'math_floor': math.floor,
    'math_fround': _handle_notimplemented,
    'math_hypot': math.hypot,
    'math_imul': _handle_notimplemented,
    # We wrap with a lambda to ensure only correct arity
    'math_log': lambda x: math.log(x),
    'math_log1p': math.log1p,
    'math_log2': math.log2,
    'math_log10': math.log10,
    'math_max': max,
    'math_min': min,
    'math_pow': math.pow,
    'math_random': _handle_notimplemented,
    'math_round': _handle_notimplemented,
    'math_sign': _handle_notimplemented,
    'math_sin': math.sin,
    'math_sinh': math.sinh,
    'math_sqrt': math.sqrt,
    'math_tan': math.tan,
    'math_tanh': math.tanh,
    'math_trunc': math.trunc,
}


def call_primitive_function(id: int, *args):
    func_name = PRIMITIVE_FUNCTIONS[id]
    f = IMPLEMENTED_FUNCTIONS.get(func_name, _handle_notimplemented)
    return f(*args)
